-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParEspresso where
import AbsEspresso
import LexEspresso
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '=>' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  'boolean' { PT _ (TS _ 22) }
  'else' { PT _ (TS _ 23) }
  'false' { PT _ (TS _ 24) }
  'for' { PT _ (TS _ 25) }
  'if' { PT _ (TS _ 26) }
  'int' { PT _ (TS _ 27) }
  'print' { PT _ (TS _ 28) }
  'return' { PT _ (TS _ 29) }
  'string' { PT _ (TS _ 30) }
  'to' { PT _ (TS _ 31) }
  'true' { PT _ (TS _ 32) }
  'void' { PT _ (TS _ 33) }
  'while' { PT _ (TS _ 34) }
  '{' { PT _ (TS _ 35) }
  '||' { PT _ (TS _ 36) }
  '}' { PT _ (TS _ 37) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

String  :: { String }
String   : L_quoted {  $1 }

Program :: { Program }
Program : ListFunDef { AbsEspresso.Program $1 }
FunDef :: { FunDef }
FunDef : Type Ident '(' ListArg ')' Block { AbsEspresso.FunDef $1 $2 $4 $6 }
ListFunDef :: { [FunDef] }
ListFunDef : FunDef { (:[]) $1 } | FunDef ListFunDef { (:) $1 $2 }
Arg :: { Arg }
Arg : Type Ident { AbsEspresso.Arg $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { AbsEspresso.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { AbsEspresso.Empty }
     | Block { AbsEspresso.BStmt $1 }
     | FunDef { AbsEspresso.FunStmt $1 }
     | Type Ident '=' Expr { AbsEspresso.Init $1 $2 $4 }
     | Ident '=' Expr { AbsEspresso.Ass $1 $3 }
     | Ident '++' { AbsEspresso.Incr $1 }
     | Ident '--' { AbsEspresso.Decr $1 }
     | 'return' Expr { AbsEspresso.Ret $2 }
     | 'return' { AbsEspresso.VRet }
     | 'if' '(' Expr ')' Stmt { AbsEspresso.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsEspresso.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsEspresso.While $3 $5 }
     | 'for' Type Ident '=' Expr 'to' Expr Block { AbsEspresso.For $2 $3 $5 $7 $8 }
     | 'print' '(' Expr ')' { AbsEspresso.Print $3 }
     | Expr { AbsEspresso.SExp $1 }
Type :: { Type }
Type : 'int' { AbsEspresso.IntT }
     | 'string' { AbsEspresso.StrT }
     | 'boolean' { AbsEspresso.BoolT }
     | 'void' { AbsEspresso.VoidT }
     | Type '(' ListType ')' { AbsEspresso.FunT $1 $3 }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Expr7 :: { Expr }
Expr7 : Ident { AbsEspresso.EVar $1 }
      | Integer { AbsEspresso.ELitInt $1 }
      | 'true' { AbsEspresso.ELitTrue }
      | 'false' { AbsEspresso.ELitFalse }
      | Ident '(' ListExpr ')' { AbsEspresso.EApp $1 $3 }
      | String { AbsEspresso.EString $1 }
      | '(' Expr ')' { $2 }
Expr6 :: { Expr }
Expr6 : '-' Expr6 { AbsEspresso.Neg $2 }
      | '!' Expr6 { AbsEspresso.Not $2 }
      | Expr7 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { AbsEspresso.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { AbsEspresso.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { AbsEspresso.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 LogicOp Expr1 { AbsEspresso.ELogic $1 $2 $3 }
      | Expr2 { $1 }
Expr :: { Expr }
Expr : '(' ListArg ')' '=>' Block { AbsEspresso.ELambda $2 $5 }
     | Expr1 { $1 }
Expr5 :: { Expr }
Expr5 : Expr6 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsEspresso.Plus } | '-' { AbsEspresso.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsEspresso.Times }
      | '/' { AbsEspresso.Div }
      | '%' { AbsEspresso.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsEspresso.LTH }
      | '<=' { AbsEspresso.LE }
      | '>' { AbsEspresso.GTH }
      | '>=' { AbsEspresso.GE }
      | '==' { AbsEspresso.EQU }
      | '!=' { AbsEspresso.NE }
LogicOp :: { LogicOp }
LogicOp : '&&' { AbsEspresso.And } | '||' { AbsEspresso.Or }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

