-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParEspresso.y
-----------------------------------------------------------------------------

state 30 contains 1 shift/reduce conflicts.
state 40 contains 1 shift/reduce conflicts.
state 53 contains 8 shift/reduce conflicts.
state 60 contains 1 shift/reduce conflicts.
state 99 contains 1 shift/reduce conflicts.
state 117 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListFunDef                              (4)
	FunDef -> Type Ident '(' ListArg ')' Block         (5)
	ListFunDef -> FunDef                               (6)
	ListFunDef -> FunDef ListFunDef                    (7)
	Arg -> Type Ident                                  (8)
	ListArg ->                                         (9)
	ListArg -> Arg                                     (10)
	ListArg -> Arg ',' ListArg                         (11)
	Block -> '{' ListStmt '}'                          (12)
	ListStmt ->                                        (13)
	ListStmt -> ListStmt Stmt                          (14)
	Stmt -> ';'                                        (15)
	Stmt -> Block                                      (16)
	Stmt -> FunDef                                     (17)
	Stmt -> Type Ident '=' Expr                        (18)
	Stmt -> Ident '=' Expr                             (19)
	Stmt -> Ident '++'                                 (20)
	Stmt -> Ident '--'                                 (21)
	Stmt -> 'return' Expr                              (22)
	Stmt -> 'return'                                   (23)
	Stmt -> 'if' '(' Expr ')' Stmt                     (24)
	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt         (25)
	Stmt -> 'while' '(' Expr ')' Stmt                  (26)
	Stmt -> 'for' Type Ident '=' Expr 'to' Expr Block   (27)
	Stmt -> 'print' '(' Expr ')'                       (28)
	Stmt -> Expr                                       (29)
	Type -> 'int'                                      (30)
	Type -> 'string'                                   (31)
	Type -> 'boolean'                                  (32)
	Type -> 'void'                                     (33)
	Type -> Type '(' ListType ')'                      (34)
	ListType ->                                        (35)
	ListType -> Type                                   (36)
	ListType -> Type ',' ListType                      (37)
	Expr7 -> Ident                                     (38)
	Expr7 -> Integer                                   (39)
	Expr7 -> 'true'                                    (40)
	Expr7 -> 'false'                                   (41)
	Expr7 -> Ident '(' ListExpr ')'                    (42)
	Expr7 -> String                                    (43)
	Expr7 -> '(' Expr ')'                              (44)
	Expr6 -> '-' Expr6                                 (45)
	Expr6 -> '!' Expr6                                 (46)
	Expr6 -> Expr7                                     (47)
	Expr4 -> Expr4 MulOp Expr5                         (48)
	Expr4 -> Expr5                                     (49)
	Expr3 -> Expr3 AddOp Expr4                         (50)
	Expr3 -> Expr4                                     (51)
	Expr2 -> Expr2 RelOp Expr3                         (52)
	Expr2 -> Expr3                                     (53)
	Expr1 -> Expr2 LogicOp Expr1                       (54)
	Expr1 -> Expr2                                     (55)
	Expr -> '(' ListArg ')' '=>' Block                 (56)
	Expr -> Expr1                                      (57)
	Expr5 -> Expr6                                     (58)
	ListExpr ->                                        (59)
	ListExpr -> Expr                                   (60)
	ListExpr -> Expr ',' ListExpr                      (61)
	AddOp -> '+'                                       (62)
	AddOp -> '-'                                       (63)
	MulOp -> '*'                                       (64)
	MulOp -> '/'                                       (65)
	MulOp -> '%'                                       (66)
	RelOp -> '<'                                       (67)
	RelOp -> '<='                                      (68)
	RelOp -> '>'                                       (69)
	RelOp -> '>='                                      (70)
	RelOp -> '=='                                      (71)
	RelOp -> '!='                                      (72)
	LogicOp -> '&&'                                    (73)
	LogicOp -> '||'                                    (74)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	'++'           { PT _ (TS _ 9) }
	','            { PT _ (TS _ 10) }
	'-'            { PT _ (TS _ 11) }
	'--'           { PT _ (TS _ 12) }
	'/'            { PT _ (TS _ 13) }
	';'            { PT _ (TS _ 14) }
	'<'            { PT _ (TS _ 15) }
	'<='           { PT _ (TS _ 16) }
	'='            { PT _ (TS _ 17) }
	'=='           { PT _ (TS _ 18) }
	'=>'           { PT _ (TS _ 19) }
	'>'            { PT _ (TS _ 20) }
	'>='           { PT _ (TS _ 21) }
	'boolean'      { PT _ (TS _ 22) }
	'else'         { PT _ (TS _ 23) }
	'false'        { PT _ (TS _ 24) }
	'for'          { PT _ (TS _ 25) }
	'if'           { PT _ (TS _ 26) }
	'int'          { PT _ (TS _ 27) }
	'print'        { PT _ (TS _ 28) }
	'return'       { PT _ (TS _ 29) }
	'string'       { PT _ (TS _ 30) }
	'to'           { PT _ (TS _ 31) }
	'true'         { PT _ (TS _ 32) }
	'void'         { PT _ (TS _ 33) }
	'while'        { PT _ (TS _ 34) }
	'{'            { PT _ (TS _ 35) }
	'||'           { PT _ (TS _ 36) }
	'}'            { PT _ (TS _ 37) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	FunDef          rule  5
	ListFunDef      rules 6, 7
	Arg             rule  8
	ListArg         rules 9, 10, 11
	Block           rule  12
	ListStmt        rules 13, 14
	Stmt            rules 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	Type            rules 30, 31, 32, 33, 34
	ListType        rules 35, 36, 37
	Expr7           rules 38, 39, 40, 41, 42, 43, 44
	Expr6           rules 45, 46, 47
	Expr4           rules 48, 49
	Expr3           rules 50, 51
	Expr2           rules 52, 53
	Expr1           rules 54, 55
	Expr            rules 56, 57
	Expr5           rule  58
	ListExpr        rules 59, 60, 61
	AddOp           rules 62, 63
	MulOp           rules 64, 65, 66
	RelOp           rules 67, 68, 69, 70, 71, 72
	LogicOp         rules 73, 74

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10

	Program        goto state 3
	FunDef         goto state 4
	ListFunDef     goto state 5
	Type           goto state 6

State 1


	L_ident        shift, and enter state 2


State 2

	Ident -> L_ident .                                  (rule 1)

	'!'            reduce using rule 1
	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'boolean'      reduce using rule 1
	'else'         reduce using rule 1
	'false'        reduce using rule 1
	'for'          reduce using rule 1
	'if'           reduce using rule 1
	'int'          reduce using rule 1
	'print'        reduce using rule 1
	'return'       reduce using rule 1
	'string'       reduce using rule 1
	'to'           reduce using rule 1
	'true'         reduce using rule 1
	'void'         reduce using rule 1
	'while'        reduce using rule 1
	'{'            reduce using rule 1
	'||'           reduce using rule 1
	'}'            reduce using rule 1
	L_ident        reduce using rule 1
	L_integ        reduce using rule 1
	L_quoted       reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	ListFunDef -> FunDef .                              (rule 6)
	ListFunDef -> FunDef . ListFunDef                   (rule 7)

	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10
	%eof           reduce using rule 6

	FunDef         goto state 4
	ListFunDef     goto state 13
	Type           goto state 6

State 5

	Program -> ListFunDef .                             (rule 4)

	%eof           reduce using rule 4


State 6

	FunDef -> Type . Ident '(' ListArg ')' Block        (rule 5)
	Type -> Type . '(' ListType ')'                     (rule 34)

	'('            shift, and enter state 12
	L_ident        shift, and enter state 2

	Ident          goto state 11

State 7

	Type -> 'boolean' .                                 (rule 32)

	'('            reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	L_ident        reduce using rule 32


State 8

	Type -> 'int' .                                     (rule 30)

	'('            reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	L_ident        reduce using rule 30


State 9

	Type -> 'string' .                                  (rule 31)

	'('            reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	L_ident        reduce using rule 31


State 10

	Type -> 'void' .                                    (rule 33)

	'('            reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	L_ident        reduce using rule 33


State 11

	FunDef -> Type Ident . '(' ListArg ')' Block        (rule 5)

	'('            shift, and enter state 16


State 12

	Type -> Type '(' . ListType ')'                     (rule 34)

	')'            reduce using rule 35
	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10

	Type           goto state 14
	ListType       goto state 15

State 13

	ListFunDef -> FunDef ListFunDef .                   (rule 7)

	%eof           reduce using rule 7


State 14

	Type -> Type . '(' ListType ')'                     (rule 34)
	ListType -> Type .                                  (rule 36)
	ListType -> Type . ',' ListType                     (rule 37)

	'('            shift, and enter state 12
	')'            reduce using rule 36
	','            shift, and enter state 21


State 15

	Type -> Type '(' ListType . ')'                     (rule 34)

	')'            shift, and enter state 20


State 16

	FunDef -> Type Ident '(' . ListArg ')' Block        (rule 5)

	')'            reduce using rule 9
	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10

	Arg            goto state 17
	ListArg        goto state 18
	Type           goto state 19

State 17

	ListArg -> Arg .                                    (rule 10)
	ListArg -> Arg . ',' ListArg                        (rule 11)

	')'            reduce using rule 10
	','            shift, and enter state 25


State 18

	FunDef -> Type Ident '(' ListArg . ')' Block        (rule 5)

	')'            shift, and enter state 24


State 19

	Arg -> Type . Ident                                 (rule 8)
	Type -> Type . '(' ListType ')'                     (rule 34)

	'('            shift, and enter state 12
	L_ident        shift, and enter state 2

	Ident          goto state 23

State 20

	Type -> Type '(' ListType ')' .                     (rule 34)

	'('            reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	L_ident        reduce using rule 34


State 21

	ListType -> Type ',' . ListType                     (rule 37)

	')'            reduce using rule 35
	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10

	Type           goto state 14
	ListType       goto state 22

State 22

	ListType -> Type ',' ListType .                     (rule 37)

	')'            reduce using rule 37


State 23

	Arg -> Type Ident .                                 (rule 8)

	')'            reduce using rule 8
	','            reduce using rule 8


State 24

	FunDef -> Type Ident '(' ListArg ')' . Block        (rule 5)

	'{'            shift, and enter state 28

	Block          goto state 27

State 25

	ListArg -> Arg ',' . ListArg                        (rule 11)

	')'            reduce using rule 9
	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10

	Arg            goto state 17
	ListArg        goto state 26
	Type           goto state 19

State 26

	ListArg -> Arg ',' ListArg .                        (rule 11)

	')'            reduce using rule 11


State 27

	FunDef -> Type Ident '(' ListArg ')' Block .        (rule 5)

	'!'            reduce using rule 5
	'('            reduce using rule 5
	'-'            reduce using rule 5
	';'            reduce using rule 5
	'boolean'      reduce using rule 5
	'else'         reduce using rule 5
	'false'        reduce using rule 5
	'for'          reduce using rule 5
	'if'           reduce using rule 5
	'int'          reduce using rule 5
	'print'        reduce using rule 5
	'return'       reduce using rule 5
	'string'       reduce using rule 5
	'true'         reduce using rule 5
	'void'         reduce using rule 5
	'while'        reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	L_ident        reduce using rule 5
	L_integ        reduce using rule 5
	L_quoted       reduce using rule 5
	%eof           reduce using rule 5


State 28

	Block -> '{' . ListStmt '}'                         (rule 12)

	'!'            reduce using rule 13
	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'boolean'      reduce using rule 13
	'false'        reduce using rule 13
	'for'          reduce using rule 13
	'if'           reduce using rule 13
	'int'          reduce using rule 13
	'print'        reduce using rule 13
	'return'       reduce using rule 13
	'string'       reduce using rule 13
	'true'         reduce using rule 13
	'void'         reduce using rule 13
	'while'        reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	L_ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13

	ListStmt       goto state 29

State 29

	Block -> '{' ListStmt . '}'                         (rule 12)
	ListStmt -> ListStmt . Stmt                         (rule 14)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	';'            shift, and enter state 48
	'boolean'      shift, and enter state 7
	'false'        shift, and enter state 49
	'for'          shift, and enter state 50
	'if'           shift, and enter state 51
	'int'          shift, and enter state 8
	'print'        shift, and enter state 52
	'return'       shift, and enter state 53
	'string'       shift, and enter state 9
	'true'         shift, and enter state 54
	'void'         shift, and enter state 10
	'while'        shift, and enter state 55
	'{'            shift, and enter state 28
	'}'            shift, and enter state 56
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	FunDef         goto state 33
	Block          goto state 34
	Stmt           goto state 35
	Type           goto state 36
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 43
	Expr5          goto state 44

State 30

	Stmt -> Ident . '=' Expr                            (rule 19)
	Stmt -> Ident . '++'                                (rule 20)
	Stmt -> Ident . '--'                                (rule 21)
	Expr7 -> Ident .                                    (rule 38)
	Expr7 -> Ident . '(' ListExpr ')'                   (rule 42)

	'!'            reduce using rule 38
	'!='           reduce using rule 38
	'%'            reduce using rule 38
	'&&'           reduce using rule 38
	'('            shift, and enter state 88
			(reduce using rule 38)

	'*'            reduce using rule 38
	'+'            reduce using rule 38
	'++'           shift, and enter state 89
	'-'            reduce using rule 38
	'--'           shift, and enter state 90
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'='            shift, and enter state 91
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'boolean'      reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'for'          reduce using rule 38
	'if'           reduce using rule 38
	'int'          reduce using rule 38
	'print'        reduce using rule 38
	'return'       reduce using rule 38
	'string'       reduce using rule 38
	'true'         reduce using rule 38
	'void'         reduce using rule 38
	'while'        reduce using rule 38
	'{'            reduce using rule 38
	'||'           reduce using rule 38
	'}'            reduce using rule 38
	L_ident        reduce using rule 38
	L_integ        reduce using rule 38
	L_quoted       reduce using rule 38


State 31

	Expr7 -> Integer .                                  (rule 39)

	'!'            reduce using rule 39
	'!='           reduce using rule 39
	'%'            reduce using rule 39
	'&&'           reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'boolean'      reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'for'          reduce using rule 39
	'if'           reduce using rule 39
	'int'          reduce using rule 39
	'print'        reduce using rule 39
	'return'       reduce using rule 39
	'string'       reduce using rule 39
	'to'           reduce using rule 39
	'true'         reduce using rule 39
	'void'         reduce using rule 39
	'while'        reduce using rule 39
	'{'            reduce using rule 39
	'||'           reduce using rule 39
	'}'            reduce using rule 39
	L_ident        reduce using rule 39
	L_integ        reduce using rule 39
	L_quoted       reduce using rule 39


State 32

	Expr7 -> String .                                   (rule 43)

	'!'            reduce using rule 43
	'!='           reduce using rule 43
	'%'            reduce using rule 43
	'&&'           reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'boolean'      reduce using rule 43
	'else'         reduce using rule 43
	'false'        reduce using rule 43
	'for'          reduce using rule 43
	'if'           reduce using rule 43
	'int'          reduce using rule 43
	'print'        reduce using rule 43
	'return'       reduce using rule 43
	'string'       reduce using rule 43
	'to'           reduce using rule 43
	'true'         reduce using rule 43
	'void'         reduce using rule 43
	'while'        reduce using rule 43
	'{'            reduce using rule 43
	'||'           reduce using rule 43
	'}'            reduce using rule 43
	L_ident        reduce using rule 43
	L_integ        reduce using rule 43
	L_quoted       reduce using rule 43


State 33

	Stmt -> FunDef .                                    (rule 17)

	'!'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'boolean'      reduce using rule 17
	'else'         reduce using rule 17
	'false'        reduce using rule 17
	'for'          reduce using rule 17
	'if'           reduce using rule 17
	'int'          reduce using rule 17
	'print'        reduce using rule 17
	'return'       reduce using rule 17
	'string'       reduce using rule 17
	'true'         reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17


State 34

	Stmt -> Block .                                     (rule 16)

	'!'            reduce using rule 16
	'('            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'boolean'      reduce using rule 16
	'else'         reduce using rule 16
	'false'        reduce using rule 16
	'for'          reduce using rule 16
	'if'           reduce using rule 16
	'int'          reduce using rule 16
	'print'        reduce using rule 16
	'return'       reduce using rule 16
	'string'       reduce using rule 16
	'true'         reduce using rule 16
	'void'         reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_ident        reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16


State 35

	ListStmt -> ListStmt Stmt .                         (rule 14)

	'!'            reduce using rule 14
	'('            reduce using rule 14
	'-'            reduce using rule 14
	';'            reduce using rule 14
	'boolean'      reduce using rule 14
	'false'        reduce using rule 14
	'for'          reduce using rule 14
	'if'           reduce using rule 14
	'int'          reduce using rule 14
	'print'        reduce using rule 14
	'return'       reduce using rule 14
	'string'       reduce using rule 14
	'true'         reduce using rule 14
	'void'         reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	L_ident        reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14


State 36

	FunDef -> Type . Ident '(' ListArg ')' Block        (rule 5)
	Stmt -> Type . Ident '=' Expr                       (rule 18)
	Type -> Type . '(' ListType ')'                     (rule 34)

	'('            shift, and enter state 12
	L_ident        shift, and enter state 2

	Ident          goto state 87

State 37

	Expr6 -> Expr7 .                                    (rule 47)

	'!'            reduce using rule 47
	'!='           reduce using rule 47
	'%'            reduce using rule 47
	'&&'           reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'boolean'      reduce using rule 47
	'else'         reduce using rule 47
	'false'        reduce using rule 47
	'for'          reduce using rule 47
	'if'           reduce using rule 47
	'int'          reduce using rule 47
	'print'        reduce using rule 47
	'return'       reduce using rule 47
	'string'       reduce using rule 47
	'to'           reduce using rule 47
	'true'         reduce using rule 47
	'void'         reduce using rule 47
	'while'        reduce using rule 47
	'{'            reduce using rule 47
	'||'           reduce using rule 47
	'}'            reduce using rule 47
	L_ident        reduce using rule 47
	L_integ        reduce using rule 47
	L_quoted       reduce using rule 47


State 38

	Expr5 -> Expr6 .                                    (rule 58)

	'!'            reduce using rule 58
	'!='           reduce using rule 58
	'%'            reduce using rule 58
	'&&'           reduce using rule 58
	'('            reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	'+'            reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'/'            reduce using rule 58
	';'            reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'boolean'      reduce using rule 58
	'else'         reduce using rule 58
	'false'        reduce using rule 58
	'for'          reduce using rule 58
	'if'           reduce using rule 58
	'int'          reduce using rule 58
	'print'        reduce using rule 58
	'return'       reduce using rule 58
	'string'       reduce using rule 58
	'to'           reduce using rule 58
	'true'         reduce using rule 58
	'void'         reduce using rule 58
	'while'        reduce using rule 58
	'{'            reduce using rule 58
	'||'           reduce using rule 58
	'}'            reduce using rule 58
	L_ident        reduce using rule 58
	L_integ        reduce using rule 58
	L_quoted       reduce using rule 58


State 39

	Expr4 -> Expr4 . MulOp Expr5                        (rule 48)
	Expr3 -> Expr4 .                                    (rule 51)

	'!'            reduce using rule 51
	'!='           reduce using rule 51
	'%'            shift, and enter state 84
	'&&'           reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'*'            shift, and enter state 85
	'+'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'/'            shift, and enter state 86
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'boolean'      reduce using rule 51
	'else'         reduce using rule 51
	'false'        reduce using rule 51
	'for'          reduce using rule 51
	'if'           reduce using rule 51
	'int'          reduce using rule 51
	'print'        reduce using rule 51
	'return'       reduce using rule 51
	'string'       reduce using rule 51
	'to'           reduce using rule 51
	'true'         reduce using rule 51
	'void'         reduce using rule 51
	'while'        reduce using rule 51
	'{'            reduce using rule 51
	'||'           reduce using rule 51
	'}'            reduce using rule 51
	L_ident        reduce using rule 51
	L_integ        reduce using rule 51
	L_quoted       reduce using rule 51

	MulOp          goto state 83

State 40

	Expr3 -> Expr3 . AddOp Expr4                        (rule 50)
	Expr2 -> Expr3 .                                    (rule 53)

	'!'            reduce using rule 53
	'!='           reduce using rule 53
	'&&'           reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	'+'            shift, and enter state 81
	','            reduce using rule 53
	'-'            shift, and enter state 82
			(reduce using rule 53)

	';'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'boolean'      reduce using rule 53
	'else'         reduce using rule 53
	'false'        reduce using rule 53
	'for'          reduce using rule 53
	'if'           reduce using rule 53
	'int'          reduce using rule 53
	'print'        reduce using rule 53
	'return'       reduce using rule 53
	'string'       reduce using rule 53
	'to'           reduce using rule 53
	'true'         reduce using rule 53
	'void'         reduce using rule 53
	'while'        reduce using rule 53
	'{'            reduce using rule 53
	'||'           reduce using rule 53
	'}'            reduce using rule 53
	L_ident        reduce using rule 53
	L_integ        reduce using rule 53
	L_quoted       reduce using rule 53

	AddOp          goto state 80

State 41

	Expr2 -> Expr2 . RelOp Expr3                        (rule 52)
	Expr1 -> Expr2 . LogicOp Expr1                      (rule 54)
	Expr1 -> Expr2 .                                    (rule 55)

	'!'            reduce using rule 55
	'!='           shift, and enter state 72
	'&&'           shift, and enter state 73
	'('            reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	';'            reduce using rule 55
	'<'            shift, and enter state 74
	'<='           shift, and enter state 75
	'=='           shift, and enter state 76
	'>'            shift, and enter state 77
	'>='           shift, and enter state 78
	'boolean'      reduce using rule 55
	'else'         reduce using rule 55
	'false'        reduce using rule 55
	'for'          reduce using rule 55
	'if'           reduce using rule 55
	'int'          reduce using rule 55
	'print'        reduce using rule 55
	'return'       reduce using rule 55
	'string'       reduce using rule 55
	'to'           reduce using rule 55
	'true'         reduce using rule 55
	'void'         reduce using rule 55
	'while'        reduce using rule 55
	'{'            reduce using rule 55
	'||'           shift, and enter state 79
	'}'            reduce using rule 55
	L_ident        reduce using rule 55
	L_integ        reduce using rule 55
	L_quoted       reduce using rule 55

	RelOp          goto state 70
	LogicOp        goto state 71

State 42

	Expr -> Expr1 .                                     (rule 57)

	'!'            reduce using rule 57
	'('            reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	';'            reduce using rule 57
	'boolean'      reduce using rule 57
	'else'         reduce using rule 57
	'false'        reduce using rule 57
	'for'          reduce using rule 57
	'if'           reduce using rule 57
	'int'          reduce using rule 57
	'print'        reduce using rule 57
	'return'       reduce using rule 57
	'string'       reduce using rule 57
	'to'           reduce using rule 57
	'true'         reduce using rule 57
	'void'         reduce using rule 57
	'while'        reduce using rule 57
	'{'            reduce using rule 57
	'}'            reduce using rule 57
	L_ident        reduce using rule 57
	L_integ        reduce using rule 57
	L_quoted       reduce using rule 57


State 43

	Stmt -> Expr .                                      (rule 29)

	'!'            reduce using rule 29
	'('            reduce using rule 29
	'-'            reduce using rule 29
	';'            reduce using rule 29
	'boolean'      reduce using rule 29
	'else'         reduce using rule 29
	'false'        reduce using rule 29
	'for'          reduce using rule 29
	'if'           reduce using rule 29
	'int'          reduce using rule 29
	'print'        reduce using rule 29
	'return'       reduce using rule 29
	'string'       reduce using rule 29
	'true'         reduce using rule 29
	'void'         reduce using rule 29
	'while'        reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	L_ident        reduce using rule 29
	L_integ        reduce using rule 29
	L_quoted       reduce using rule 29


State 44

	Expr4 -> Expr5 .                                    (rule 49)

	'!'            reduce using rule 49
	'!='           reduce using rule 49
	'%'            reduce using rule 49
	'&&'           reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'boolean'      reduce using rule 49
	'else'         reduce using rule 49
	'false'        reduce using rule 49
	'for'          reduce using rule 49
	'if'           reduce using rule 49
	'int'          reduce using rule 49
	'print'        reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'to'           reduce using rule 49
	'true'         reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'||'           reduce using rule 49
	'}'            reduce using rule 49
	L_ident        reduce using rule 49
	L_integ        reduce using rule 49
	L_quoted       reduce using rule 49


State 45

	Expr6 -> '!' . Expr6                                (rule 46)

	'!'            shift, and enter state 45
	'('            shift, and enter state 66
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 69

State 46

	Expr7 -> '(' . Expr ')'                             (rule 44)
	Expr -> '(' . ListArg ')' '=>' Block                (rule 56)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	')'            reduce using rule 9
	'-'            shift, and enter state 47
	'boolean'      shift, and enter state 7
	'false'        shift, and enter state 49
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'true'         shift, and enter state 54
	'void'         shift, and enter state 10
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Arg            goto state 17
	ListArg        goto state 67
	Type           goto state 19
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 68
	Expr5          goto state 44

State 47

	Expr6 -> '-' . Expr6                                (rule 45)

	'!'            shift, and enter state 45
	'('            shift, and enter state 66
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 65

State 48

	Stmt -> ';' .                                       (rule 15)

	'!'            reduce using rule 15
	'('            reduce using rule 15
	'-'            reduce using rule 15
	';'            reduce using rule 15
	'boolean'      reduce using rule 15
	'else'         reduce using rule 15
	'false'        reduce using rule 15
	'for'          reduce using rule 15
	'if'           reduce using rule 15
	'int'          reduce using rule 15
	'print'        reduce using rule 15
	'return'       reduce using rule 15
	'string'       reduce using rule 15
	'true'         reduce using rule 15
	'void'         reduce using rule 15
	'while'        reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	L_ident        reduce using rule 15
	L_integ        reduce using rule 15
	L_quoted       reduce using rule 15


State 49

	Expr7 -> 'false' .                                  (rule 41)

	'!'            reduce using rule 41
	'!='           reduce using rule 41
	'%'            reduce using rule 41
	'&&'           reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	';'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'boolean'      reduce using rule 41
	'else'         reduce using rule 41
	'false'        reduce using rule 41
	'for'          reduce using rule 41
	'if'           reduce using rule 41
	'int'          reduce using rule 41
	'print'        reduce using rule 41
	'return'       reduce using rule 41
	'string'       reduce using rule 41
	'to'           reduce using rule 41
	'true'         reduce using rule 41
	'void'         reduce using rule 41
	'while'        reduce using rule 41
	'{'            reduce using rule 41
	'||'           reduce using rule 41
	'}'            reduce using rule 41
	L_ident        reduce using rule 41
	L_integ        reduce using rule 41
	L_quoted       reduce using rule 41


State 50

	Stmt -> 'for' . Type Ident '=' Expr 'to' Expr Block    (rule 27)

	'boolean'      shift, and enter state 7
	'int'          shift, and enter state 8
	'string'       shift, and enter state 9
	'void'         shift, and enter state 10

	Type           goto state 64

State 51

	Stmt -> 'if' . '(' Expr ')' Stmt                    (rule 24)
	Stmt -> 'if' . '(' Expr ')' Stmt 'else' Stmt        (rule 25)

	'('            shift, and enter state 63


State 52

	Stmt -> 'print' . '(' Expr ')'                      (rule 28)

	'('            shift, and enter state 62


State 53

	Stmt -> 'return' . Expr                             (rule 22)
	Stmt -> 'return' .                                  (rule 23)

	'!'            shift, and enter state 45
			(reduce using rule 23)

	'('            shift, and enter state 46
			(reduce using rule 23)

	'-'            shift, and enter state 47
			(reduce using rule 23)

	';'            reduce using rule 23
	'boolean'      reduce using rule 23
	'else'         reduce using rule 23
	'false'        shift, and enter state 49
			(reduce using rule 23)

	'for'          reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'print'        reduce using rule 23
	'return'       reduce using rule 23
	'string'       reduce using rule 23
	'true'         shift, and enter state 54
			(reduce using rule 23)

	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_ident        shift, and enter state 2
			(reduce using rule 23)

	L_integ        shift, and enter state 57
			(reduce using rule 23)

	L_quoted       shift, and enter state 58
			(reduce using rule 23)


	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 61
	Expr5          goto state 44

State 54

	Expr7 -> 'true' .                                   (rule 40)

	'!'            reduce using rule 40
	'!='           reduce using rule 40
	'%'            reduce using rule 40
	'&&'           reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'boolean'      reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'for'          reduce using rule 40
	'if'           reduce using rule 40
	'int'          reduce using rule 40
	'print'        reduce using rule 40
	'return'       reduce using rule 40
	'string'       reduce using rule 40
	'to'           reduce using rule 40
	'true'         reduce using rule 40
	'void'         reduce using rule 40
	'while'        reduce using rule 40
	'{'            reduce using rule 40
	'||'           reduce using rule 40
	'}'            reduce using rule 40
	L_ident        reduce using rule 40
	L_integ        reduce using rule 40
	L_quoted       reduce using rule 40


State 55

	Stmt -> 'while' . '(' Expr ')' Stmt                 (rule 26)

	'('            shift, and enter state 59


State 56

	Block -> '{' ListStmt '}' .                         (rule 12)

	'!'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	';'            reduce using rule 12
	'boolean'      reduce using rule 12
	'else'         reduce using rule 12
	'false'        reduce using rule 12
	'for'          reduce using rule 12
	'if'           reduce using rule 12
	'int'          reduce using rule 12
	'print'        reduce using rule 12
	'return'       reduce using rule 12
	'string'       reduce using rule 12
	'to'           reduce using rule 12
	'true'         reduce using rule 12
	'void'         reduce using rule 12
	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_ident        reduce using rule 12
	L_integ        reduce using rule 12
	L_quoted       reduce using rule 12
	%eof           reduce using rule 12


State 57

	Integer -> L_integ .                                (rule 2)

	'!'            reduce using rule 2
	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&&'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'boolean'      reduce using rule 2
	'else'         reduce using rule 2
	'false'        reduce using rule 2
	'for'          reduce using rule 2
	'if'           reduce using rule 2
	'int'          reduce using rule 2
	'print'        reduce using rule 2
	'return'       reduce using rule 2
	'string'       reduce using rule 2
	'to'           reduce using rule 2
	'true'         reduce using rule 2
	'void'         reduce using rule 2
	'while'        reduce using rule 2
	'{'            reduce using rule 2
	'||'           reduce using rule 2
	'}'            reduce using rule 2
	L_ident        reduce using rule 2
	L_integ        reduce using rule 2
	L_quoted       reduce using rule 2


State 58

	String -> L_quoted .                                (rule 3)

	'!'            reduce using rule 3
	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&&'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'boolean'      reduce using rule 3
	'else'         reduce using rule 3
	'false'        reduce using rule 3
	'for'          reduce using rule 3
	'if'           reduce using rule 3
	'int'          reduce using rule 3
	'print'        reduce using rule 3
	'return'       reduce using rule 3
	'string'       reduce using rule 3
	'to'           reduce using rule 3
	'true'         reduce using rule 3
	'void'         reduce using rule 3
	'while'        reduce using rule 3
	'{'            reduce using rule 3
	'||'           reduce using rule 3
	'}'            reduce using rule 3
	L_ident        reduce using rule 3
	L_integ        reduce using rule 3
	L_quoted       reduce using rule 3


State 59

	Stmt -> 'while' '(' . Expr ')' Stmt                 (rule 26)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 105
	Expr5          goto state 44

State 60

	Expr7 -> Ident .                                    (rule 38)
	Expr7 -> Ident . '(' ListExpr ')'                   (rule 42)

	'!'            reduce using rule 38
	'!='           reduce using rule 38
	'%'            reduce using rule 38
	'&&'           reduce using rule 38
	'('            shift, and enter state 88
			(reduce using rule 38)

	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'boolean'      reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'for'          reduce using rule 38
	'if'           reduce using rule 38
	'int'          reduce using rule 38
	'print'        reduce using rule 38
	'return'       reduce using rule 38
	'string'       reduce using rule 38
	'to'           reduce using rule 38
	'true'         reduce using rule 38
	'void'         reduce using rule 38
	'while'        reduce using rule 38
	'{'            reduce using rule 38
	'||'           reduce using rule 38
	'}'            reduce using rule 38
	L_ident        reduce using rule 38
	L_integ        reduce using rule 38
	L_quoted       reduce using rule 38


State 61

	Stmt -> 'return' Expr .                             (rule 22)

	'!'            reduce using rule 22
	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'boolean'      reduce using rule 22
	'else'         reduce using rule 22
	'false'        reduce using rule 22
	'for'          reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'print'        reduce using rule 22
	'return'       reduce using rule 22
	'string'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22


State 62

	Stmt -> 'print' '(' . Expr ')'                      (rule 28)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 104
	Expr5          goto state 44

State 63

	Stmt -> 'if' '(' . Expr ')' Stmt                    (rule 24)
	Stmt -> 'if' '(' . Expr ')' Stmt 'else' Stmt        (rule 25)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 103
	Expr5          goto state 44

State 64

	Stmt -> 'for' Type . Ident '=' Expr 'to' Expr Block    (rule 27)
	Type -> Type . '(' ListType ')'                     (rule 34)

	'('            shift, and enter state 12
	L_ident        shift, and enter state 2

	Ident          goto state 102

State 65

	Expr6 -> '-' Expr6 .                                (rule 45)

	'!'            reduce using rule 45
	'!='           reduce using rule 45
	'%'            reduce using rule 45
	'&&'           reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'boolean'      reduce using rule 45
	'else'         reduce using rule 45
	'false'        reduce using rule 45
	'for'          reduce using rule 45
	'if'           reduce using rule 45
	'int'          reduce using rule 45
	'print'        reduce using rule 45
	'return'       reduce using rule 45
	'string'       reduce using rule 45
	'to'           reduce using rule 45
	'true'         reduce using rule 45
	'void'         reduce using rule 45
	'while'        reduce using rule 45
	'{'            reduce using rule 45
	'||'           reduce using rule 45
	'}'            reduce using rule 45
	L_ident        reduce using rule 45
	L_integ        reduce using rule 45
	L_quoted       reduce using rule 45


State 66

	Expr7 -> '(' . Expr ')'                             (rule 44)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 68
	Expr5          goto state 44

State 67

	Expr -> '(' ListArg . ')' '=>' Block                (rule 56)

	')'            shift, and enter state 101


State 68

	Expr7 -> '(' Expr . ')'                             (rule 44)

	')'            shift, and enter state 100


State 69

	Expr6 -> '!' Expr6 .                                (rule 46)

	'!'            reduce using rule 46
	'!='           reduce using rule 46
	'%'            reduce using rule 46
	'&&'           reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'boolean'      reduce using rule 46
	'else'         reduce using rule 46
	'false'        reduce using rule 46
	'for'          reduce using rule 46
	'if'           reduce using rule 46
	'int'          reduce using rule 46
	'print'        reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'to'           reduce using rule 46
	'true'         reduce using rule 46
	'void'         reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'||'           reduce using rule 46
	'}'            reduce using rule 46
	L_ident        reduce using rule 46
	L_integ        reduce using rule 46
	L_quoted       reduce using rule 46


State 70

	Expr2 -> Expr2 RelOp . Expr3                        (rule 52)

	'!'            shift, and enter state 45
	'('            shift, and enter state 66
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 99
	Expr5          goto state 44

State 71

	Expr1 -> Expr2 LogicOp . Expr1                      (rule 54)

	'!'            shift, and enter state 45
	'('            shift, and enter state 66
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 98
	Expr5          goto state 44

State 72

	RelOp -> '!=' .                                     (rule 72)

	'!'            reduce using rule 72
	'('            reduce using rule 72
	'-'            reduce using rule 72
	'false'        reduce using rule 72
	'true'         reduce using rule 72
	L_ident        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72


State 73

	LogicOp -> '&&' .                                   (rule 73)

	'!'            reduce using rule 73
	'('            reduce using rule 73
	'-'            reduce using rule 73
	'false'        reduce using rule 73
	'true'         reduce using rule 73
	L_ident        reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73


State 74

	RelOp -> '<' .                                      (rule 67)

	'!'            reduce using rule 67
	'('            reduce using rule 67
	'-'            reduce using rule 67
	'false'        reduce using rule 67
	'true'         reduce using rule 67
	L_ident        reduce using rule 67
	L_integ        reduce using rule 67
	L_quoted       reduce using rule 67


State 75

	RelOp -> '<=' .                                     (rule 68)

	'!'            reduce using rule 68
	'('            reduce using rule 68
	'-'            reduce using rule 68
	'false'        reduce using rule 68
	'true'         reduce using rule 68
	L_ident        reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68


State 76

	RelOp -> '==' .                                     (rule 71)

	'!'            reduce using rule 71
	'('            reduce using rule 71
	'-'            reduce using rule 71
	'false'        reduce using rule 71
	'true'         reduce using rule 71
	L_ident        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71


State 77

	RelOp -> '>' .                                      (rule 69)

	'!'            reduce using rule 69
	'('            reduce using rule 69
	'-'            reduce using rule 69
	'false'        reduce using rule 69
	'true'         reduce using rule 69
	L_ident        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69


State 78

	RelOp -> '>=' .                                     (rule 70)

	'!'            reduce using rule 70
	'('            reduce using rule 70
	'-'            reduce using rule 70
	'false'        reduce using rule 70
	'true'         reduce using rule 70
	L_ident        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70


State 79

	LogicOp -> '||' .                                   (rule 74)

	'!'            reduce using rule 74
	'('            reduce using rule 74
	'-'            reduce using rule 74
	'false'        reduce using rule 74
	'true'         reduce using rule 74
	L_ident        reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74


State 80

	Expr3 -> Expr3 AddOp . Expr4                        (rule 50)

	'!'            shift, and enter state 45
	'('            shift, and enter state 66
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 97
	Expr5          goto state 44

State 81

	AddOp -> '+' .                                      (rule 62)

	'!'            reduce using rule 62
	'('            reduce using rule 62
	'-'            reduce using rule 62
	'false'        reduce using rule 62
	'true'         reduce using rule 62
	L_ident        reduce using rule 62
	L_integ        reduce using rule 62
	L_quoted       reduce using rule 62


State 82

	AddOp -> '-' .                                      (rule 63)

	'!'            reduce using rule 63
	'('            reduce using rule 63
	'-'            reduce using rule 63
	'false'        reduce using rule 63
	'true'         reduce using rule 63
	L_ident        reduce using rule 63
	L_integ        reduce using rule 63
	L_quoted       reduce using rule 63


State 83

	Expr4 -> Expr4 MulOp . Expr5                        (rule 48)

	'!'            shift, and enter state 45
	'('            shift, and enter state 66
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr5          goto state 96

State 84

	MulOp -> '%' .                                      (rule 66)

	'!'            reduce using rule 66
	'('            reduce using rule 66
	'-'            reduce using rule 66
	'false'        reduce using rule 66
	'true'         reduce using rule 66
	L_ident        reduce using rule 66
	L_integ        reduce using rule 66
	L_quoted       reduce using rule 66


State 85

	MulOp -> '*' .                                      (rule 64)

	'!'            reduce using rule 64
	'('            reduce using rule 64
	'-'            reduce using rule 64
	'false'        reduce using rule 64
	'true'         reduce using rule 64
	L_ident        reduce using rule 64
	L_integ        reduce using rule 64
	L_quoted       reduce using rule 64


State 86

	MulOp -> '/' .                                      (rule 65)

	'!'            reduce using rule 65
	'('            reduce using rule 65
	'-'            reduce using rule 65
	'false'        reduce using rule 65
	'true'         reduce using rule 65
	L_ident        reduce using rule 65
	L_integ        reduce using rule 65
	L_quoted       reduce using rule 65


State 87

	FunDef -> Type Ident . '(' ListArg ')' Block        (rule 5)
	Stmt -> Type Ident . '=' Expr                       (rule 18)

	'('            shift, and enter state 16
	'='            shift, and enter state 95


State 88

	Expr7 -> Ident '(' . ListExpr ')'                   (rule 42)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	')'            reduce using rule 59
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 93
	Expr5          goto state 44
	ListExpr       goto state 94

State 89

	Stmt -> Ident '++' .                                (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'boolean'      reduce using rule 20
	'else'         reduce using rule 20
	'false'        reduce using rule 20
	'for'          reduce using rule 20
	'if'           reduce using rule 20
	'int'          reduce using rule 20
	'print'        reduce using rule 20
	'return'       reduce using rule 20
	'string'       reduce using rule 20
	'true'         reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20


State 90

	Stmt -> Ident '--' .                                (rule 21)

	'!'            reduce using rule 21
	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'boolean'      reduce using rule 21
	'else'         reduce using rule 21
	'false'        reduce using rule 21
	'for'          reduce using rule 21
	'if'           reduce using rule 21
	'int'          reduce using rule 21
	'print'        reduce using rule 21
	'return'       reduce using rule 21
	'string'       reduce using rule 21
	'true'         reduce using rule 21
	'void'         reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21


State 91

	Stmt -> Ident '=' . Expr                            (rule 19)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 92
	Expr5          goto state 44

State 92

	Stmt -> Ident '=' Expr .                            (rule 19)

	'!'            reduce using rule 19
	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'boolean'      reduce using rule 19
	'else'         reduce using rule 19
	'false'        reduce using rule 19
	'for'          reduce using rule 19
	'if'           reduce using rule 19
	'int'          reduce using rule 19
	'print'        reduce using rule 19
	'return'       reduce using rule 19
	'string'       reduce using rule 19
	'true'         reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	L_ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19


State 93

	ListExpr -> Expr .                                  (rule 60)
	ListExpr -> Expr . ',' ListExpr                     (rule 61)

	')'            reduce using rule 60
	','            shift, and enter state 113


State 94

	Expr7 -> Ident '(' ListExpr . ')'                   (rule 42)

	')'            shift, and enter state 112


State 95

	Stmt -> Type Ident '=' . Expr                       (rule 18)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 111
	Expr5          goto state 44

State 96

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 48)

	'!'            reduce using rule 48
	'!='           reduce using rule 48
	'%'            reduce using rule 48
	'&&'           reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'boolean'      reduce using rule 48
	'else'         reduce using rule 48
	'false'        reduce using rule 48
	'for'          reduce using rule 48
	'if'           reduce using rule 48
	'int'          reduce using rule 48
	'print'        reduce using rule 48
	'return'       reduce using rule 48
	'string'       reduce using rule 48
	'to'           reduce using rule 48
	'true'         reduce using rule 48
	'void'         reduce using rule 48
	'while'        reduce using rule 48
	'{'            reduce using rule 48
	'||'           reduce using rule 48
	'}'            reduce using rule 48
	L_ident        reduce using rule 48
	L_integ        reduce using rule 48
	L_quoted       reduce using rule 48


State 97

	Expr4 -> Expr4 . MulOp Expr5                        (rule 48)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 50)

	'!'            reduce using rule 50
	'!='           reduce using rule 50
	'%'            shift, and enter state 84
	'&&'           reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'*'            shift, and enter state 85
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            shift, and enter state 86
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'boolean'      reduce using rule 50
	'else'         reduce using rule 50
	'false'        reduce using rule 50
	'for'          reduce using rule 50
	'if'           reduce using rule 50
	'int'          reduce using rule 50
	'print'        reduce using rule 50
	'return'       reduce using rule 50
	'string'       reduce using rule 50
	'to'           reduce using rule 50
	'true'         reduce using rule 50
	'void'         reduce using rule 50
	'while'        reduce using rule 50
	'{'            reduce using rule 50
	'||'           reduce using rule 50
	'}'            reduce using rule 50
	L_ident        reduce using rule 50
	L_integ        reduce using rule 50
	L_quoted       reduce using rule 50

	MulOp          goto state 83

State 98

	Expr1 -> Expr2 LogicOp Expr1 .                      (rule 54)

	'!'            reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'-'            reduce using rule 54
	';'            reduce using rule 54
	'boolean'      reduce using rule 54
	'else'         reduce using rule 54
	'false'        reduce using rule 54
	'for'          reduce using rule 54
	'if'           reduce using rule 54
	'int'          reduce using rule 54
	'print'        reduce using rule 54
	'return'       reduce using rule 54
	'string'       reduce using rule 54
	'to'           reduce using rule 54
	'true'         reduce using rule 54
	'void'         reduce using rule 54
	'while'        reduce using rule 54
	'{'            reduce using rule 54
	'}'            reduce using rule 54
	L_ident        reduce using rule 54
	L_integ        reduce using rule 54
	L_quoted       reduce using rule 54


State 99

	Expr3 -> Expr3 . AddOp Expr4                        (rule 50)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 52)

	'!'            reduce using rule 52
	'!='           reduce using rule 52
	'&&'           reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'+'            shift, and enter state 81
	','            reduce using rule 52
	'-'            shift, and enter state 82
			(reduce using rule 52)

	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'boolean'      reduce using rule 52
	'else'         reduce using rule 52
	'false'        reduce using rule 52
	'for'          reduce using rule 52
	'if'           reduce using rule 52
	'int'          reduce using rule 52
	'print'        reduce using rule 52
	'return'       reduce using rule 52
	'string'       reduce using rule 52
	'to'           reduce using rule 52
	'true'         reduce using rule 52
	'void'         reduce using rule 52
	'while'        reduce using rule 52
	'{'            reduce using rule 52
	'||'           reduce using rule 52
	'}'            reduce using rule 52
	L_ident        reduce using rule 52
	L_integ        reduce using rule 52
	L_quoted       reduce using rule 52

	AddOp          goto state 80

State 100

	Expr7 -> '(' Expr ')' .                             (rule 44)

	'!'            reduce using rule 44
	'!='           reduce using rule 44
	'%'            reduce using rule 44
	'&&'           reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'boolean'      reduce using rule 44
	'else'         reduce using rule 44
	'false'        reduce using rule 44
	'for'          reduce using rule 44
	'if'           reduce using rule 44
	'int'          reduce using rule 44
	'print'        reduce using rule 44
	'return'       reduce using rule 44
	'string'       reduce using rule 44
	'to'           reduce using rule 44
	'true'         reduce using rule 44
	'void'         reduce using rule 44
	'while'        reduce using rule 44
	'{'            reduce using rule 44
	'||'           reduce using rule 44
	'}'            reduce using rule 44
	L_ident        reduce using rule 44
	L_integ        reduce using rule 44
	L_quoted       reduce using rule 44


State 101

	Expr -> '(' ListArg ')' . '=>' Block                (rule 56)

	'=>'           shift, and enter state 110


State 102

	Stmt -> 'for' Type Ident . '=' Expr 'to' Expr Block    (rule 27)

	'='            shift, and enter state 109


State 103

	Stmt -> 'if' '(' Expr . ')' Stmt                    (rule 24)
	Stmt -> 'if' '(' Expr . ')' Stmt 'else' Stmt        (rule 25)

	')'            shift, and enter state 108


State 104

	Stmt -> 'print' '(' Expr . ')'                      (rule 28)

	')'            shift, and enter state 107


State 105

	Stmt -> 'while' '(' Expr . ')' Stmt                 (rule 26)

	')'            shift, and enter state 106


State 106

	Stmt -> 'while' '(' Expr ')' . Stmt                 (rule 26)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	';'            shift, and enter state 48
	'boolean'      shift, and enter state 7
	'false'        shift, and enter state 49
	'for'          shift, and enter state 50
	'if'           shift, and enter state 51
	'int'          shift, and enter state 8
	'print'        shift, and enter state 52
	'return'       shift, and enter state 53
	'string'       shift, and enter state 9
	'true'         shift, and enter state 54
	'void'         shift, and enter state 10
	'while'        shift, and enter state 55
	'{'            shift, and enter state 28
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	FunDef         goto state 33
	Block          goto state 34
	Stmt           goto state 118
	Type           goto state 36
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 43
	Expr5          goto state 44

State 107

	Stmt -> 'print' '(' Expr ')' .                      (rule 28)

	'!'            reduce using rule 28
	'('            reduce using rule 28
	'-'            reduce using rule 28
	';'            reduce using rule 28
	'boolean'      reduce using rule 28
	'else'         reduce using rule 28
	'false'        reduce using rule 28
	'for'          reduce using rule 28
	'if'           reduce using rule 28
	'int'          reduce using rule 28
	'print'        reduce using rule 28
	'return'       reduce using rule 28
	'string'       reduce using rule 28
	'true'         reduce using rule 28
	'void'         reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	L_ident        reduce using rule 28
	L_integ        reduce using rule 28
	L_quoted       reduce using rule 28


State 108

	Stmt -> 'if' '(' Expr ')' . Stmt                    (rule 24)
	Stmt -> 'if' '(' Expr ')' . Stmt 'else' Stmt        (rule 25)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	';'            shift, and enter state 48
	'boolean'      shift, and enter state 7
	'false'        shift, and enter state 49
	'for'          shift, and enter state 50
	'if'           shift, and enter state 51
	'int'          shift, and enter state 8
	'print'        shift, and enter state 52
	'return'       shift, and enter state 53
	'string'       shift, and enter state 9
	'true'         shift, and enter state 54
	'void'         shift, and enter state 10
	'while'        shift, and enter state 55
	'{'            shift, and enter state 28
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	FunDef         goto state 33
	Block          goto state 34
	Stmt           goto state 117
	Type           goto state 36
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 43
	Expr5          goto state 44

State 109

	Stmt -> 'for' Type Ident '=' . Expr 'to' Expr Block    (rule 27)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 116
	Expr5          goto state 44

State 110

	Expr -> '(' ListArg ')' '=>' . Block                (rule 56)

	'{'            shift, and enter state 28

	Block          goto state 115

State 111

	Stmt -> Type Ident '=' Expr .                       (rule 18)

	'!'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'boolean'      reduce using rule 18
	'else'         reduce using rule 18
	'false'        reduce using rule 18
	'for'          reduce using rule 18
	'if'           reduce using rule 18
	'int'          reduce using rule 18
	'print'        reduce using rule 18
	'return'       reduce using rule 18
	'string'       reduce using rule 18
	'true'         reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	L_ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18


State 112

	Expr7 -> Ident '(' ListExpr ')' .                   (rule 42)

	'!'            reduce using rule 42
	'!='           reduce using rule 42
	'%'            reduce using rule 42
	'&&'           reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'boolean'      reduce using rule 42
	'else'         reduce using rule 42
	'false'        reduce using rule 42
	'for'          reduce using rule 42
	'if'           reduce using rule 42
	'int'          reduce using rule 42
	'print'        reduce using rule 42
	'return'       reduce using rule 42
	'string'       reduce using rule 42
	'to'           reduce using rule 42
	'true'         reduce using rule 42
	'void'         reduce using rule 42
	'while'        reduce using rule 42
	'{'            reduce using rule 42
	'||'           reduce using rule 42
	'}'            reduce using rule 42
	L_ident        reduce using rule 42
	L_integ        reduce using rule 42
	L_quoted       reduce using rule 42


State 113

	ListExpr -> Expr ',' . ListExpr                     (rule 61)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	')'            reduce using rule 59
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 93
	Expr5          goto state 44
	ListExpr       goto state 114

State 114

	ListExpr -> Expr ',' ListExpr .                     (rule 61)

	')'            reduce using rule 61


State 115

	Expr -> '(' ListArg ')' '=>' Block .                (rule 56)

	'!'            reduce using rule 56
	'('            reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	';'            reduce using rule 56
	'boolean'      reduce using rule 56
	'else'         reduce using rule 56
	'false'        reduce using rule 56
	'for'          reduce using rule 56
	'if'           reduce using rule 56
	'int'          reduce using rule 56
	'print'        reduce using rule 56
	'return'       reduce using rule 56
	'string'       reduce using rule 56
	'to'           reduce using rule 56
	'true'         reduce using rule 56
	'void'         reduce using rule 56
	'while'        reduce using rule 56
	'{'            reduce using rule 56
	'}'            reduce using rule 56
	L_ident        reduce using rule 56
	L_integ        reduce using rule 56
	L_quoted       reduce using rule 56


State 116

	Stmt -> 'for' Type Ident '=' Expr . 'to' Expr Block    (rule 27)

	'to'           shift, and enter state 120


State 117

	Stmt -> 'if' '(' Expr ')' Stmt .                    (rule 24)
	Stmt -> 'if' '(' Expr ')' Stmt . 'else' Stmt        (rule 25)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'boolean'      reduce using rule 24
	'else'         shift, and enter state 119
			(reduce using rule 24)

	'false'        reduce using rule 24
	'for'          reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'print'        reduce using rule 24
	'return'       reduce using rule 24
	'string'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24


State 118

	Stmt -> 'while' '(' Expr ')' Stmt .                 (rule 26)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'boolean'      reduce using rule 26
	'else'         reduce using rule 26
	'false'        reduce using rule 26
	'for'          reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'print'        reduce using rule 26
	'return'       reduce using rule 26
	'string'       reduce using rule 26
	'true'         reduce using rule 26
	'void'         reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	L_ident        reduce using rule 26
	L_integ        reduce using rule 26
	L_quoted       reduce using rule 26


State 119

	Stmt -> 'if' '(' Expr ')' Stmt 'else' . Stmt        (rule 25)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	';'            shift, and enter state 48
	'boolean'      shift, and enter state 7
	'false'        shift, and enter state 49
	'for'          shift, and enter state 50
	'if'           shift, and enter state 51
	'int'          shift, and enter state 8
	'print'        shift, and enter state 52
	'return'       shift, and enter state 53
	'string'       shift, and enter state 9
	'true'         shift, and enter state 54
	'void'         shift, and enter state 10
	'while'        shift, and enter state 55
	'{'            shift, and enter state 28
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	FunDef         goto state 33
	Block          goto state 34
	Stmt           goto state 122
	Type           goto state 36
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 43
	Expr5          goto state 44

State 120

	Stmt -> 'for' Type Ident '=' Expr 'to' . Expr Block    (rule 27)

	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'-'            shift, and enter state 47
	'false'        shift, and enter state 49
	'true'         shift, and enter state 54
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 57
	L_quoted       shift, and enter state 58

	Ident          goto state 60
	Integer        goto state 31
	String         goto state 32
	Expr7          goto state 37
	Expr6          goto state 38
	Expr4          goto state 39
	Expr3          goto state 40
	Expr2          goto state 41
	Expr1          goto state 42
	Expr           goto state 121
	Expr5          goto state 44

State 121

	Stmt -> 'for' Type Ident '=' Expr 'to' Expr . Block    (rule 27)

	'{'            shift, and enter state 28

	Block          goto state 123

State 122

	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt .        (rule 25)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'boolean'      reduce using rule 25
	'else'         reduce using rule 25
	'false'        reduce using rule 25
	'for'          reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'print'        reduce using rule 25
	'return'       reduce using rule 25
	'string'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	L_ident        reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25


State 123

	Stmt -> 'for' Type Ident '=' Expr 'to' Expr Block .    (rule 27)

	'!'            reduce using rule 27
	'('            reduce using rule 27
	'-'            reduce using rule 27
	';'            reduce using rule 27
	'boolean'      reduce using rule 27
	'else'         reduce using rule 27
	'false'        reduce using rule 27
	'for'          reduce using rule 27
	'if'           reduce using rule 27
	'int'          reduce using rule 27
	'print'        reduce using rule 27
	'return'       reduce using rule 27
	'string'       reduce using rule 27
	'true'         reduce using rule 27
	'void'         reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	L_ident        reduce using rule 27
	L_integ        reduce using rule 27
	L_quoted       reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 75
Number of terminals: 40
Number of non-terminals: 27
Number of states: 124
