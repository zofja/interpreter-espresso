-- automatically generated by BNF Converter
module Main where

import           Control.Monad
import           Control.Monad.Except
import           Control.Monad.Reader
import           Control.Monad.State.Lazy
import           Data.Map                 hiding (showTree)
import qualified Data.Map                 as Map hiding (showTree)
import           System.Environment       (getArgs, getProgName)
import           System.Exit              (exitFailure, exitSuccess)
import           System.IO                (hGetContents, hPutStrLn, stderr,
                                           stdin)

import           AbsEspresso
import           Evaluator
import           LexEspresso
import           ParEspresso
import           PrintEspresso

import           ErrM

type ParseFun a = [Token] -> Err a

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v parser file = readFile file >>= run v parser

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v parser input =
  let tokens = myLexer input
   in case parser tokens of
        Bad err -> do
          putStrV v "Parse failed.\n"
          putStrV v "Tokens: "
          putStrV v $ show tokens
          hPutStrLn stderr err
          exitFailure
        Ok tree -> do
          putStrV v "Parse successful!"
          showTree v tree
          putStrV v "Interpreting..."
          res <- runExceptT $ evalStateT (runReaderT (evalProgram tree) Map.empty) Map.empty
          case res of
            Left err -> do
              hPutStrLn stderr $ show err
              exitFailure
            Right res -> do
              exitSuccess

main :: IO ()
main = do
  args <- getArgs
  case args of
    [] -> getContents >>= run 0 pProgram
    fs -> mapM_ (runFile 0 pProgram) fs
